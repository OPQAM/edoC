// OOP1.cpp : freeCodeCamp

#include <iostream>
using std::string;

class Employee {

private:
    string Name;
    string Company;
    int Age;

public:
    //setter - receives the parameter 'name' and sets the value of Name to name
    void setName(string name) {
        Name = name;
    }
    //getter - returns the value of our name property
    string getName() {
        return Name;
    }
    void setCompany(string company) {
        Company = company;
    }
    string getCompany() {
        return Company;
    }
    void setAge(int age) {
        if(age>=18) // a check - a validation rule
        Age = age;
        /*else {
            std::cout << "Boom";
        }
        // I ADDED THIS HERE - it can work as a control*/
    }
    int getAge() {
        return Age;
    }
    // a function inside the class Employee:
    void IntroduceYourself() {
        std::cout << "My name is " << Name << std::endl;
        std::cout << "My company is " << Company << std::endl;
        std::cout << "I'm " << Age << " old" << std::endl;
    }
    // constructor of the class (inside the public area):
    Employee(string name, string company, int age) {
        Name = name;
        Company = company;
        Age = age;
    }
};
int main()
{
    Employee employee1 = Employee("Ricardo", "ATEC", 45);
    employee1.IntroduceYourself();

    Employee employee2 = Employee("John", "Amazon", 35);
    employee2.IntroduceYourself();

    // testing setters and getters:
    employee1.setAge(17);
    std::cout << employee1.getName() << " is " << employee1.getAge() << " years old." << std::endl;
}

// whenever we create an object of a class, a constructor is invoked
// default constructor - automatically generated by the complier
// Constructor rules:
// 1- The constructor does not have a return type
// 2- The constructor has the same name as the class
// 3- The constructor exists by default

//getters and setters
